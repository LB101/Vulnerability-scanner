import socket
import threading
import sys


def get_ip_address(domain_name):
    try:
        ip_address = socket.gethostbyname(domain_name)
        return ip_address
    except socket.error as e:
        return f"Error: {e}"

def scan_port(ip_address, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip_address, port))

        if result == 0:
            banner = get_banner(sock)
            if banner:
                print(f"Port {port} is open on {ip_address} and running: {banner}")
            else:
                print(f"Port {port} is open on {ip_address} (No banner available)")
        
        sock.close()
    except socket.error:
        pass  # Ignore errors for simplicity

def get_banner(sock):
    try:
        # Receive data from the socket (adjust the buffer size as needed)
        banner = sock.recv(1024).decode('utf-8').strip()
        return banner
    except socket.error:
        return None  # Return None if unable to retrieve a banner

def port_scan(ip_address):
    print(f"Scanning ports for {ip_address}...\n")

    # Define the range of ports to scan (you can adjust this range)
    start_port = 1
    end_port = 1024

    # Use threading for faster scanning
    threads = []

    for port in range(start_port, end_port + 1):
        thread = threading.Thread(target=scan_port, args=(ip_address, port))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()


# domain_name = input("Enter the domain name: ")
domain_name =  sys.argv[1] # passing value from php

ip_address = get_ip_address(domain_name)

if ip_address.startswith("Error"):
    print(ip_address)
else:
    print(f"The IP address of {domain_name} is: {ip_address}")
    port_scan(ip_address)
