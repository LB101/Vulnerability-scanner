import dns.resolver

def check_mx_records(domain):
    try:
        mx_records = dns.resolver.resolve(domain, 'MX')
        print("MX Records for", domain)
        for mx in mx_records:
            print(mx.to_text())
        return True
    except Exception as e:
        print("Error fetching MX records:", e)
        return False

def check_spf_record(domain):
    try:
        spf_records = dns.resolver.resolve(domain, 'TXT')
        for record in spf_records:
            record_str = record.to_text()
            if "v=spf1" in record_str:
                print("SPF record found for", domain)
                print(record_str)
                return True
        print("No SPF record found for", domain)
        return False
    except Exception as e:
        print("Error fetching SPF record:", e)
        return False

def check_dkim_record(domain):
    try:
        dkim_records = dns.resolver.resolve(f'_domainkey.{domain}', 'TXT')
        print("DKIM Records for", domain)
        for record in dkim_records:
            print(record.to_text())
        return True
    except Exception as e:
        print("No DKIM record found for", domain)
        return False

def check_dmarc_record(domain):
    try:
        dmarc_records = dns.resolver.resolve(f'_dmarc.{domain}', 'TXT')
        print("DMARC Record for", domain)
        for record in dmarc_records:
            record_str = record.to_text()
            if "p=quarantine" in record_str.lower() or "p=reject" in record_str.lower():
                print("DMARC policy set to quarantine or reject")
                print(record_str)
                return True
        print("DMARC policy not set to quarantine or reject")
        return False
    except Exception as e:
        print("No DMARC record found for", domain)
        return False

def check_spoofing_vulnerability(domain):
    mx_records_exist = check_mx_records(domain)
    spf_record_exist = check_spf_record(domain)
    dkim_record_exist = check_dkim_record(domain)
    dmarc_record_exist = check_dmarc_record(domain)

    if mx_records_exist and spf_record_exist and dkim_record_exist and dmarc_record_exist:
        print("The domain is less likely to be vulnerable to email spoofing.")
    else:
        print("The domain may be vulnerable to email spoofing.")

def main():
    domain = "uk.yahoo.com"
    check_spoofing_vulnerability(domain)

if __name__ == "__main__":
    main()
